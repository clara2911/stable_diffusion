import openai


class GPT3TextGenerator:

    def __init__(self,
                 engine="text-davinci-002",
                 temperature=0.5,
                 max_tokens=4000,
                 top_p=1.0,
                 frequency_penalty=0.0,
                 presence_penalty=0.0
                 ):
        self.engine = engine
        self.temperature = temperature
        self.max_tokens = max_tokens
        self.top_p = top_p
        self.frequency_penalty = frequency_penalty
        self.presence_penalty = presence_penalty

        self._pass_openai_api_key()

    def _pass_openai_api_key(self):
        openai.api_key = ""

    def continue_story_from_prompt(self, prompt, sentiment=""):
        """
        :param prompt: The start (typically first sentence) of the story
        :param sentiment: the sentiment the story should get. E.g. funny or sad.
        :return: a continuation of the story generated by gpt3
        """
        gpt3_prompt = f"Continue this {sentiment} story: {prompt}"
        response_text = self._generate_gpt3_response(gpt3_prompt)
        return response_text

    def summarize(self, story_text):
        """

        :param story_text:
        :return:
        """
        gpt3_prompt = f"Summarize this story: {story_text}"
        response_text = self._generate_gpt3_response(gpt3_prompt)
        return response_text

    def summarize_visually(self, story_text):
        """

        :param story_text:
        :return:
        """
        gpt3_prompt = f"Summarize this story visually: {story_text}"
        response_text = self._generate_gpt3_response(gpt3_prompt)
        return response_text

    def _generate_gpt3_response(self, gpt3_prompt):
        """

        :param gpt3_prompt:
        :return:
        """
        response = openai.Completion.create(
            engine=self.engine,
            prompt=gpt3_prompt,
            temperature=self.temperature,
            max_tokens=self.max_tokens,
            top_p=self.top_p,
            frequency_penalty=self.frequency_penalty,
            presence_penalty=self.presence_penalty
        )
        response_text = response['choices'][0]['text']
        return response_text
